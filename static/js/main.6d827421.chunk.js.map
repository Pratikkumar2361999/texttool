{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","mystyle","setMyStyle","btntext","setBtnText","className","style","id","type","onClick","border","Navbar","props","mode","href","title","aboutText","toggleMode","htmlFor","TextForm","text","setText","heading","rows","value","onChange","event","target","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","newText","split","join","length","defaultProps","Alert","alert","role","word","lower","charAt","slice","captalize","msg","App","setMode","setAlert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6d827421.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\n\r\nexport default function About() {\r\n \r\nconst [mystyle, setMyStyle] = useState({\r\n  color : \"white\",\r\n  backgroundColor : \"#343a40\"\r\n})\r\nconst [btntext, setBtnText] = useState(\"Enable Dark Mode\")\r\n \r\nconst toggleStyle = () =>{\r\n  if(mystyle.color === \"#343a40\"){\r\n  setMyStyle({\r\n    color : \"white\",\r\n    backgroundColor : \"#343a40\",\r\n    border: \"1px solid white\"\r\n\r\n  })\r\n  setBtnText(\"Enable Light Mode\")\r\n\r\n}\r\nelse{\r\n  setMyStyle({\r\n    color : \"#343a40\",\r\n  backgroundColor : \"white\"\r\n    \r\n  })\r\n  setBtnText(\"Enable Dark mode\")\r\n}\r\n}\r\n  return (\r\n    <div className=\"container\" style ={mystyle}>\r\n      <div className=\"accordion\" id=\"accordionExample\" style ={mystyle}>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              style ={mystyle}\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show \"\r\n            style ={mystyle}\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              style ={mystyle}\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n            style ={mystyle}\r\n          >\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n             \r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n             style ={mystyle}>\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            style ={mystyle}\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"container my-3\">\r\n      <button type=\"button\" onClick={toggleStyle} className=\"btn btn-primary\">{btntext}</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} `}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"/navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <animateTransform className=\"nav-link active\" href=\"#\">\r\n                {props.aboutText}\r\n              </animateTransform>\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-primary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div className={`form-check form-switch text-${props.mode===\"light\"?\"dark\":\"light\"}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\nNavbar.defaultProps = {\r\n  title: \"Please set Title\",\r\n  aboutText: \"About\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpclick = () => {\r\n    setText(text.toUpperCase());\r\n    props.showAlert(\"Converted to Uppercase\",\"success\")\r\n  };\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n  const handleLoclick = () => {\r\n    setText(text.toLowerCase());\r\n    props.showAlert(\"Converted to Lowercase\",\"success\")\r\n  };\r\n  const ClearText = () => {\r\n    setText(\"\");\r\n    props.showAlert(\"Text Cleared \",\"success\")\r\n  };\r\n  const handleCopy = () => {\r\n    let text = document.getElementById(\"exampleFormControlTextarea1\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Text Copied  \",\"success\")\r\n\r\n  };\r\n  const handleExtraSpace = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"))\r\n    props.showAlert(\"Extra Spaces are Removed\",\"success\")\r\n\r\n  };\r\n  const [text, setText] = useState(\"\");\r\n  return (\r\n    <>\r\n      <div className=\"container mt-5\" style={{color:props.mode===\"dark\"?\"white\":\"#343a40\"}}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control \"\r\n            id=\"exampleFormControlTextarea1\"\r\n            rows=\"8\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style = {{backgroundColor:props.mode===\"light\"?\"white\":\"#343a40\" ,color:props.mode===\"dark\"?\"white\":\"#343a40\"}}\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary\" onClick={handleUpclick}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2 my-2\" onClick={handleLoclick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        <button className=\"btn btn-primary\" onClick={ClearText}>\r\n          Clear Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>\r\n          Copy Text\r\n        </button>\r\n        <button className=\"btn btn-primary\" onClick={handleExtraSpace}>\r\n          Remove Extraspaces\r\n        </button>\r\n      </div>\r\n      <div className=\"container my-3\" style={{color:props.mode===\"dark\"?\"white\":\"#343a40\"}}>\r\n        <h2>Your Text Summary</h2>\r\n        <p>\r\n          {text.split(\" \").length} words and {text.length}\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} minutes are taken in read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Enter something into the textbox to preview it here\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n    const captalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{captalize(props.alert.type)}</strong>: {props.alert.msg}\r\n\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from 'react'\nimport Alert from \"./components/Alert\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\")\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n\n    })\n    setTimeout(() => {\n      setAlert(null);\n    },1500);\n  }\n\n  const toggleMode =() =>{\n    if (mode === 'light'){\n    setMode(\"dark\")\n    document.body.style.backgroundColor = \"#343a40\";\n    showAlert(\"Dark mode has been enabled\", \"success\")\n  }\n    else{\n      setMode(\"light\")\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\")\n\n    }\n    \n  }\n  return (\n    <>\n    <Router>\n      <Navbar title=\"Textyfire\" mode = {mode} toggleMode = {toggleMode} />\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n      <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n          <TextForm showAlert={showAlert} heading=\"Enter the text to Analyze \" mode = {mode}/>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}